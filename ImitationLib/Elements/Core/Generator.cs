using System;
using ImitationLib.Utils;

namespace ImitationLib.Elements.Core
{
	public abstract class Generator : Element, IGiver
	{
		/// <summary>
		/// Number of <see cref="Transact"/> that can be generated by this <see cref="Generator"/>
		/// </summary>
		protected int _count;

		/// <summary>
		/// Number of <see cref="Transact"/> that can be IN <see cref="Element"/>
		/// </summary>
		protected new int _capacity = Constants.ZeroQueueCapacity;

		/// <summary>
		/// <seealso cref="IGiver.Give"/>
		/// </summary>
		/// <param name="time"></param>
		/// <returns>Given <see cref="Transact"/></returns>
		public virtual Transact Give(int time)
		{
			var transact = this.Transacts.Dequeue();
			// TODO: rename constant
			this.ReadyIn = this._count > 0 ? this.Delay : Constants.ReadyToTake;
			transact.LifeTime = $"{transact} is given by {this} at {time}";
			return transact;
		}

		/// <summary>
		/// Generates <see cref="Transact"/>
		/// </summary>
		protected virtual void Generate(Random random = null)
		{
			var transact = new Transact(random);
			this.Transacts.Enqueue(transact);
			this._count--;
		}

		/// <summary>
		/// <seealso cref="Element.Process"/>
		/// </summary>
		/// <param name="time"></param>
		/// <exception cref="Exception"></exception>
		public override void Process(int time)
		{
			this.Generate();
			base.Process(time);
			var temp = this.Give(time);
			try
			{
				this.Out(temp, time);
			}
			catch (Exception e)
			{
				Logger.Log.Error(e.Message);
			}
		}
	}
}
